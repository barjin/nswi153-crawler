openapi: 3.1.0
servers:
  - url: 'http://localhost:8080/api'
info:
  description: >-
    This is the OpenAPI specification for the NSWI153 course project 'Webcrawler'.
  version: 1.0.0
  title: OpenAPI Webcrawler
  license:
    name: Apache-2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
externalDocs:
  description: More information about Webcrawler API
  url: https://webik.ms.mff.cuni.cz/nswi153/seminar-project-webcrawler.html
tags:
  - name: website-record
    description: Record of scheduled website crawls.

paths:
  /records:
    get:
      tags:
        - website-record
      summary: Get all website records
      description: Gets a list of all the current website records
      operationId: getRecordsList
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Record'

    post:
      tags:
        - website-record
      summary: Insert new website record
      description: Adds a new website record to the list of website records
      operationId: addRecord
      requestBody:
        $ref: '#/components/requestBodies/Record'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        '400':
          description: Invalid input
      security:
        - records_auth:
          - write:records
          - read:records

    put:
      tags:
        - website-record
      summary: Update an existing website record by ID
      description: Updates one of the records in the list of website records.
      operationId: updateRecord
      parameters:
        - name: recordId
          in: query
          description: The ID of the record that should be modified
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Record'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        '400':
          description: Invalid ID
        '404':
          description: Record not found
      security:
        - records_auth:
          - write:records
          - read:records

    delete:
      tags:
        - website-record
      summary: Delete a record by ID
      description: Delete a record from the website record list based on an ID given in the query string.
      operationId: deleteRecord
      parameters:
        - name: recordId
          in: query
          description: The ID of the record that should be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '400':
          description: Invalid ID
        '404':
          description: Record not found
      security:
        - records_auth:
          - write:records
          - read:records


components:
  securitySchemes:
    records_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: ''
          scopes:
            write:records: add and modify records in the website records list
            read:records: read records from the website records list

  requestBodies:
    Record:
      description: A record object
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Record'

  schemas:
    Record:
      title: Website Record
      description: A record of a website crawl
      type: object
      required:
        - url
        - boundaryRegEx
      properties:
        id:
          type: integer
          format: int64
        url:
          description: The URL at which the crawler should start.
          type: string
          format: uri
          pattern: '^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$'
        boundaryRegEx:
          description: The crawler will proceed crawling only the links that match this regular expression.
          type: string
        periodicity:
          description: How often should the site be crawled (minute, hour, day)
          type: string
          default: daily
          enum:
            - every minute
            - hourly
            - daily
        label:
          description: A user-given label
          type: string
        isActive:
          description: If inactive, the site is not crawled based on the Periodicity.
          type: boolean
          default: true
        tags:
          description: A list of user-given tags.
          type: array
          items:
            type: string